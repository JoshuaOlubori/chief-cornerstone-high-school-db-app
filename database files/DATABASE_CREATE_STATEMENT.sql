-- MySQL Script generated by MySQL Workbench
-- Mon May  8 13:52:14 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema cchs
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema cchs
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema cchs
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `cchs` DEFAULT CHARACTER SET utf8mb3 ;
USE `cchs` ;

-- -----------------------------------------------------
-- Table `cchs`.`class`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cchs`.`class` ;

CREATE TABLE IF NOT EXISTS `cchs`.`class` (
  `class_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `class_name` VARCHAR(8) NOT NULL,
  `js_ss` ENUM('JS', 'SS') NULL DEFAULT NULL,
  `last_update` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`class_id`),
  UNIQUE INDEX `name_UNIQUE` (`class_name` ASC) VISIBLE,
  UNIQUE INDEX `class_name` (`class_name` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 60
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `cchs`.`person`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cchs`.`person` ;

CREATE TABLE IF NOT EXISTS `cchs`.`person` (
  `person_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(45) NOT NULL,
  `last_name` VARCHAR(45) NOT NULL,
  `dob` DATE NULL DEFAULT NULL,
  `blood_group` VARCHAR(4) NULL DEFAULT NULL,
  `genotype` CHAR(2) NULL DEFAULT NULL,
  `religion` ENUM('Christianity', 'Islam', 'Others') NULL DEFAULT NULL,
  `address` TEXT NULL DEFAULT NULL,
  `phone` CHAR(11) NULL DEFAULT NULL,
  `spouse_phone` CHAR(11) NULL DEFAULT NULL,
  `ethnicity` VARCHAR(45) NULL DEFAULT NULL,
  `city_or_town` VARCHAR(45) NULL DEFAULT NULL,
  `medical_condition` VARCHAR(45) NULL DEFAULT NULL,
  `last_update` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`person_id`),
  UNIQUE INDEX `person_id_UNIQUE` (`first_name` ASC, `last_name` ASC, `dob` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 129
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `cchs`.`student`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cchs`.`student` ;

CREATE TABLE IF NOT EXISTS `cchs`.`student` (
  `person_id` INT UNSIGNED NOT NULL,
  `class_id` INT UNSIGNED NOT NULL,
  `last_update` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `registration_date` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`person_id`),
  INDEX `fk_Student_Class1_idx` (`class_id` ASC) VISIBLE,
  INDEX `fk_Student_People1_idx` (`person_id` ASC) VISIBLE,
  CONSTRAINT `fk_Student_Class1`
    FOREIGN KEY (`class_id`)
    REFERENCES `cchs`.`class` (`class_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Student_People1`
    FOREIGN KEY (`person_id`)
    REFERENCES `cchs`.`person` (`person_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `cchs`.`department`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cchs`.`department` ;

CREATE TABLE IF NOT EXISTS `cchs`.`department` (
  `dept_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `dept_name` VARCHAR(45) NOT NULL,
  `last_update` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`dept_id`),
  UNIQUE INDEX `name_UNIQUE` (`dept_name` ASC) VISIBLE,
  UNIQUE INDEX `class_name` (`dept_name` ASC) VISIBLE,
  UNIQUE INDEX `dept_name` (`dept_name` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 12
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `cchs`.`staff`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cchs`.`staff` ;

CREATE TABLE IF NOT EXISTS `cchs`.`staff` (
  `person_id` INT UNSIGNED NOT NULL,
  `spouse_phone` CHAR(11) NULL DEFAULT NULL,
  `dept_id` INT UNSIGNED NOT NULL,
  `bonus` DECIMAL(10,0) NULL DEFAULT NULL,
  `last_update` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `hod_id` INT UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`person_id`),
  UNIQUE INDEX `hod_dept_staff` (`person_id` ASC, `dept_id` ASC, `hod_id` ASC) COMMENT '\'\'\'Ensures that there can only be one HOD for each department\'\'\'' VISIBLE,
  INDEX `fk_Staff_People1_idx` (`person_id` ASC) VISIBLE,
  INDEX `fk_Staff_Department1_idx` (`dept_id` ASC) VISIBLE,
  INDEX `fk_staff_staff1_idx` (`hod_id` ASC) VISIBLE,
  CONSTRAINT `fk_Staff_Department1`
    FOREIGN KEY (`dept_id`)
    REFERENCES `cchs`.`department` (`dept_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Staff_People1`
    FOREIGN KEY (`person_id`)
    REFERENCES `cchs`.`person` (`person_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_staff_staff1`
    FOREIGN KEY (`hod_id`)
    REFERENCES `cchs`.`staff` (`person_id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `cchs`.`teachingstaff`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cchs`.`teachingstaff` ;

CREATE TABLE IF NOT EXISTS `cchs`.`teachingstaff` (
  `person_id` INT UNSIGNED NOT NULL,
  `last_update` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`person_id`),
  CONSTRAINT `fk_TeachingStaff_Staff1`
    FOREIGN KEY (`person_id`)
    REFERENCES `cchs`.`staff` (`person_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `cchs`.`term`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cchs`.`term` ;

CREATE TABLE IF NOT EXISTS `cchs`.`term` (
  `term` INT NOT NULL,
  `is_current` TINYINT UNSIGNED NULL DEFAULT NULL,
  `last_update` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`term`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `cchs`.`termship`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cchs`.`termship` ;

CREATE TABLE IF NOT EXISTS `cchs`.`termship` (
  `term` INT NOT NULL,
  `session_id` INT NOT NULL,
  `start_date` DATETIME NOT NULL,
  `end_date` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`term`, `session_id`),
  INDEX `fk_Term_has_Session_Term1_idx` (`term` ASC) VISIBLE,
  INDEX `fk_Term_has_Session_Session1_idx` (`session_id` ASC) VISIBLE,
  CONSTRAINT `fk_Term_has_Session_Term1`
    FOREIGN KEY (`term`)
    REFERENCES `cchs`.`term` (`term`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `cchs`.`attendance`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cchs`.`attendance` ;

CREATE TABLE IF NOT EXISTS `cchs`.`attendance` (
  `student_id` INT UNSIGNED NOT NULL,
  `teacher_id` INT UNSIGNED NOT NULL,
  `att_date` DATE NOT NULL,
  `present` TINYINT NULL DEFAULT NULL,
  `term` INT NOT NULL,
  `session_id` INT NOT NULL,
  `last_update` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`att_date`, `term`, `session_id`),
  INDEX `fk_Attendance_TeachingStaff1_idx` (`teacher_id` ASC) VISIBLE,
  INDEX `fk_Attendance_termship1_idx` (`term` ASC, `session_id` ASC) VISIBLE,
  INDEX `fk_Attendance_Student1` (`student_id` ASC) VISIBLE,
  CONSTRAINT `fk_Attendance_Student1`
    FOREIGN KEY (`student_id`)
    REFERENCES `cchs`.`student` (`person_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Attendance_TeachingStaff1`
    FOREIGN KEY (`teacher_id`)
    REFERENCES `cchs`.`teachingstaff` (`person_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Attendance_termship1`
    FOREIGN KEY (`term` , `session_id`)
    REFERENCES `cchs`.`termship` (`term` , `session_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `cchs`.`classroom`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cchs`.`classroom` ;

CREATE TABLE IF NOT EXISTS `cchs`.`classroom` (
  `classroom_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `floor_level` INT NULL DEFAULT NULL,
  `capacity` INT NULL DEFAULT NULL,
  `last_update` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`classroom_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 14
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `cchs`.`school_subject`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cchs`.`school_subject` ;

CREATE TABLE IF NOT EXISTS `cchs`.`school_subject` (
  `subject_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `subject_name` VARCHAR(45) NOT NULL,
  `last_update` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `department_dept_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`subject_id`),
  UNIQUE INDEX `name_UNIQUE` (`subject_name` ASC) VISIBLE,
  UNIQUE INDEX `subject_name` (`subject_name` ASC) VISIBLE,
  INDEX `fk_school_subject_department1_idx` (`department_dept_id` ASC) VISIBLE,
  CONSTRAINT `fk_school_subject_department1`
    FOREIGN KEY (`department_dept_id`)
    REFERENCES `cchs`.`department` (`dept_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `cchs`.`period`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cchs`.`period` ;

CREATE TABLE IF NOT EXISTS `cchs`.`period` (
  `period_id` INT NOT NULL AUTO_INCREMENT,
  `period_name` VARCHAR(15) NOT NULL,
  `start_time` DATETIME NOT NULL,
  `end_time` DATETIME NOT NULL,
  `last_update` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`period_id`),
  UNIQUE INDEX `period_name` (`period_name` ASC) VISIBLE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `cchs`.`classfact`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cchs`.`classfact` ;

CREATE TABLE IF NOT EXISTS `cchs`.`classfact` (
  `class_id` INT UNSIGNED NOT NULL,
  `class_teacher_id` INT UNSIGNED NOT NULL,
  `classroom_id` INT UNSIGNED NOT NULL,
  `subject_id` INT UNSIGNED NOT NULL,
  `student_id` INT UNSIGNED NOT NULL,
  `term` INT NOT NULL,
  `session_id` INT NOT NULL,
  `start_period_id` INT NULL DEFAULT NULL,
  `end_period_id` INT NULL DEFAULT NULL,
  `last_update` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`term`, `session_id`),
  INDEX `fk_ClassFact_Subject1_idx` (`subject_id` ASC) VISIBLE,
  INDEX `fk_ClassFact_TeachingStaff1_idx` (`class_teacher_id` ASC) VISIBLE,
  INDEX `fk_ClassFact_Classroom_idx` (`classroom_id` ASC) VISIBLE,
  INDEX `fk_ClassFact_Term_has_Session1_idx` (`term` ASC, `session_id` ASC) VISIBLE,
  INDEX `fk_ClassFact_Student1_idx` (`student_id` ASC) VISIBLE,
  INDEX `fk_period_id1_idx` (`start_period_id` ASC) VISIBLE,
  INDEX `fk_period_id2_idx` (`end_period_id` ASC) VISIBLE,
  INDEX `fk_ClassFact_Class1` (`class_id` ASC) VISIBLE,
  CONSTRAINT `fk_ClassFact_Class1`
    FOREIGN KEY (`class_id`)
    REFERENCES `cchs`.`class` (`class_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_ClassFact_Classroom`
    FOREIGN KEY (`classroom_id`)
    REFERENCES `cchs`.`classroom` (`classroom_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_ClassFact_Student1`
    FOREIGN KEY (`student_id`)
    REFERENCES `cchs`.`student` (`person_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_ClassFact_Subject1`
    FOREIGN KEY (`subject_id`)
    REFERENCES `cchs`.`school_subject` (`subject_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_ClassFact_TeachingStaff1`
    FOREIGN KEY (`class_teacher_id`)
    REFERENCES `cchs`.`teachingstaff` (`person_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_ClassFact_Term_has_Session1`
    FOREIGN KEY (`term` , `session_id`)
    REFERENCES `cchs`.`termship` (`term` , `session_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_period_id1`
    FOREIGN KEY (`start_period_id`)
    REFERENCES `cchs`.`period` (`period_id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `fk_period_id2`
    FOREIGN KEY (`end_period_id`)
    REFERENCES `cchs`.`period` (`period_id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `cchs`.`exam`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cchs`.`exam` ;

CREATE TABLE IF NOT EXISTS `cchs`.`exam` (
  `exam_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `max_score` INT NULL DEFAULT NULL,
  `subject_id` INT UNSIGNED NOT NULL,
  `exam_name` VARCHAR(45) NOT NULL,
  `last_update` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`exam_id`),
  UNIQUE INDEX `exam_name` (`exam_name` ASC) VISIBLE,
  INDEX `fk_Exam_Subject1_idx` (`subject_id` ASC) VISIBLE,
  CONSTRAINT `fk_Exam_Subject1`
    FOREIGN KEY (`subject_id`)
    REFERENCES `cchs`.`school_subject` (`subject_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `cchs`.`examfact`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cchs`.`examfact` ;

CREATE TABLE IF NOT EXISTS `cchs`.`examfact` (
  `exam_id` INT UNSIGNED NOT NULL,
  `student_id` INT UNSIGNED NOT NULL,
  `invigilator_id` INT UNSIGNED NOT NULL,
  `term` INT NOT NULL,
  `session_id` INT NOT NULL,
  `start_date` DATETIME NOT NULL,
  `end_date` DATETIME NOT NULL,
  `score` INT UNSIGNED NOT NULL,
  `last_updated` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`term`, `session_id`),
  INDEX `fk_ExamFact_Student1_idx` (`student_id` ASC) VISIBLE,
  INDEX `fk_ExamFact_Staff1_idx` (`invigilator_id` ASC) VISIBLE,
  INDEX `fk_ExamFact_Exam1` (`exam_id` ASC) VISIBLE,
  CONSTRAINT `fk_ExamFact_Exam1`
    FOREIGN KEY (`exam_id`)
    REFERENCES `cchs`.`exam` (`exam_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_ExamFact_Staff1`
    FOREIGN KEY (`invigilator_id`)
    REFERENCES `cchs`.`staff` (`person_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_ExamFact_Student1`
    FOREIGN KEY (`student_id`)
    REFERENCES `cchs`.`student` (`person_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_ExamFact_Term_has_Session1`
    FOREIGN KEY (`term` , `session_id`)
    REFERENCES `cchs`.`termship` (`term` , `session_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `cchs`.`guardian`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cchs`.`guardian` ;

CREATE TABLE IF NOT EXISTS `cchs`.`guardian` (
  `person_id` INT UNSIGNED NOT NULL,
  `student_id` INT UNSIGNED NOT NULL,
  `spouse_id` INT UNSIGNED NULL DEFAULT NULL,
  `last_update` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  INDEX `fk_Guardian_People1_idx` (`person_id` ASC) VISIBLE,
  INDEX `fk_Guardian_People2_idx` (`spouse_id` ASC) VISIBLE,
  CONSTRAINT `fk_Guardian_People1`
    FOREIGN KEY (`person_id`)
    REFERENCES `cchs`.`person` (`person_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Guardian_People2`
    FOREIGN KEY (`spouse_id`)
    REFERENCES `cchs`.`person` (`person_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `cchs`.`guardian_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cchs`.`guardian_type` ;

CREATE TABLE IF NOT EXISTS `cchs`.`guardian_type` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC) VISIBLE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `cchs`.`guardianship`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cchs`.`guardianship` ;

CREATE TABLE IF NOT EXISTS `cchs`.`guardianship` (
  `student_id` INT UNSIGNED NOT NULL,
  `guardian_id` INT UNSIGNED NOT NULL,
  `start_date` DATE NULL DEFAULT NULL,
  `end_date` DATE NULL DEFAULT NULL,
  `last_update` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `guardian_type_id` INT NULL DEFAULT NULL,
  INDEX `fk_Student_has_Guardian_Guardian1_idx` (`guardian_id` ASC) VISIBLE,
  INDEX `fk_guardianship_guardian_type1_idx` (`guardian_type_id` ASC) VISIBLE,
  INDEX `fk_Student_has_Guardian_Student1` (`student_id` ASC) VISIBLE,
  CONSTRAINT `fk_guardianship_guardian_type1`
    FOREIGN KEY (`guardian_type_id`)
    REFERENCES `cchs`.`guardian_type` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Student_has_Guardian_Guardian1`
    FOREIGN KEY (`guardian_id`)
    REFERENCES `cchs`.`guardian` (`person_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Student_has_Guardian_Student1`
    FOREIGN KEY (`student_id`)
    REFERENCES `cchs`.`student` (`person_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `cchs`.`salary`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cchs`.`salary` ;

CREATE TABLE IF NOT EXISTS `cchs`.`salary` (
  `salary_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `amount` DECIMAL(10,0) NULL DEFAULT NULL,
  `tier` VARCHAR(45) NULL DEFAULT NULL,
  `last_update` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`salary_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `cchs`.`school_session`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cchs`.`school_session` ;

CREATE TABLE IF NOT EXISTS `cchs`.`school_session` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `s_name` CHAR(9) NOT NULL,
  `start_date` DATETIME NOT NULL,
  `end_date` DATETIME NULL DEFAULT NULL,
  `is_current` TINYINT UNSIGNED NULL DEFAULT NULL,
  `last_update` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `name_UNIQUE` (`s_name` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 8
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `cchs`.`schoolfees`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cchs`.`schoolfees` ;

CREATE TABLE IF NOT EXISTS `cchs`.`schoolfees` (
  `amount` DECIMAL(10,0) NOT NULL,
  `fully_paid` TINYINT NULL DEFAULT NULL,
  `student_id` INT UNSIGNED NOT NULL,
  `term` INT NOT NULL,
  `session_id` INT NOT NULL,
  `last_update` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`term`, `session_id`),
  INDEX `fk_SchoolFees_Student1_idx` (`student_id` ASC) VISIBLE,
  INDEX `fk_SchoolFees_termship1_idx` (`term` ASC, `session_id` ASC) VISIBLE,
  CONSTRAINT `fk_SchoolFees_Student1`
    FOREIGN KEY (`student_id`)
    REFERENCES `cchs`.`student` (`person_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_SchoolFees_termship1`
    FOREIGN KEY (`term` , `session_id`)
    REFERENCES `cchs`.`termship` (`term` , `session_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `cchs`.`staffsalaryhistory`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cchs`.`staffsalaryhistory` ;

CREATE TABLE IF NOT EXISTS `cchs`.`staffsalaryhistory` (
  `version_no` INT UNSIGNED NOT NULL,
  `staff_person_id` INT UNSIGNED NOT NULL,
  `salary_id` INT UNSIGNED NOT NULL,
  `start_date` DATETIME NOT NULL,
  `end_date` DATETIME NOT NULL,
  `last_update` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`version_no`, `staff_person_id`, `salary_id`),
  INDEX `fk_StaffSalaryHistory_Staff1_idx` (`staff_person_id` ASC) VISIBLE,
  INDEX `fk_StaffSalaryHistory_Salary1_idx` (`salary_id` ASC) VISIBLE,
  CONSTRAINT `fk_StaffSalaryHistory_Salary1`
    FOREIGN KEY (`salary_id`)
    REFERENCES `cchs`.`salary` (`salary_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_StaffSalaryHistory_Staff1`
    FOREIGN KEY (`staff_person_id`)
    REFERENCES `cchs`.`staff` (`person_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `cchs`.`studentclasshistory`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cchs`.`studentclasshistory` ;

CREATE TABLE IF NOT EXISTS `cchs`.`studentclasshistory` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `student_id` INT UNSIGNED NOT NULL,
  `class_id` INT UNSIGNED NOT NULL,
  `graduated` TINYINT NULL DEFAULT NULL,
  `teacher_id` INT UNSIGNED NULL DEFAULT NULL,
  `classroom_id` INT UNSIGNED NOT NULL,
  `session_id` INT NOT NULL,
  `start_date` DATETIME NOT NULL,
  `end_date` DATETIME NULL DEFAULT NULL,
  `last_update` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`, `class_id`, `session_id`),
  INDEX `fk_StudentClassHistory_Student1_idx` (`student_id` ASC) VISIBLE,
  INDEX `fk_StudentClassHistory_Class1_idx` (`class_id` ASC) VISIBLE,
  INDEX `fk_studentclasshistory_teachingstaff1_idx` (`teacher_id` ASC) VISIBLE,
  INDEX `fk_studentclasshistory_classroom1_idx` (`classroom_id` ASC) VISIBLE,
  INDEX `fk_studentclasshistory_termship1_idx` (`session_id` ASC) VISIBLE,
  CONSTRAINT `fk_studentclasshistory_classroom1`
    FOREIGN KEY (`classroom_id`)
    REFERENCES `cchs`.`classroom` (`classroom_id`),
  CONSTRAINT `fk_StudentClassHistory_Student1`
    FOREIGN KEY (`student_id`)
    REFERENCES `cchs`.`student` (`person_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_studentclasshistory_teachingstaff1`
    FOREIGN KEY (`teacher_id`)
    REFERENCES `cchs`.`teachingstaff` (`person_id`),
  CONSTRAINT `fk_studentclasshistory_termship1`
    FOREIGN KEY (`session_id`)
    REFERENCES `cchs`.`termship` (`session_id`)
    ON UPDATE RESTRICT)
ENGINE = InnoDB
AUTO_INCREMENT = 17
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `cchs`.`test`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cchs`.`test` ;

CREATE TABLE IF NOT EXISTS `cchs`.`test` (
  `test_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `test_name` VARCHAR(45) NOT NULL,
  `max_score` INT NULL DEFAULT NULL,
  `subject_id` INT UNSIGNED NOT NULL,
  `last_updated` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`test_id`),
  UNIQUE INDEX `test_name` (`test_name` ASC) VISIBLE,
  INDEX `fk_Exam_Subject1_idx` (`subject_id` ASC) VISIBLE,
  CONSTRAINT `fk_Exam_Subject10`
    FOREIGN KEY (`subject_id`)
    REFERENCES `cchs`.`school_subject` (`subject_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `cchs`.`testfact`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cchs`.`testfact` ;

CREATE TABLE IF NOT EXISTS `cchs`.`testfact` (
  `test_id` INT UNSIGNED NOT NULL,
  `student_id` INT UNSIGNED NOT NULL,
  `invigilator_id` INT UNSIGNED NOT NULL,
  `start_date` DATETIME NOT NULL,
  `end_date` DATETIME NOT NULL,
  `score` INT NOT NULL,
  `term` INT NOT NULL,
  `session_id` INT NOT NULL,
  `last_update` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`term`, `session_id`),
  INDEX `fk_ExamFact_Student1_idx` (`student_id` ASC) VISIBLE,
  INDEX `fk_ExamFact_Staff1_idx` (`invigilator_id` ASC) VISIBLE,
  INDEX `fk_TestFact_Term_has_Session1_idx` (`term` ASC, `session_id` ASC) VISIBLE,
  INDEX `fk_ExamFact_Exam10` (`test_id` ASC) VISIBLE,
  CONSTRAINT `fk_ExamFact_Exam10`
    FOREIGN KEY (`test_id`)
    REFERENCES `cchs`.`test` (`test_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_ExamFact_Staff10`
    FOREIGN KEY (`invigilator_id`)
    REFERENCES `cchs`.`staff` (`person_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_ExamFact_Student10`
    FOREIGN KEY (`student_id`)
    REFERENCES `cchs`.`student` (`person_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_TestFact_Term_has_Session1`
    FOREIGN KEY (`term` , `session_id`)
    REFERENCES `cchs`.`termship` (`term` , `session_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;

USE `cchs` ;

-- -----------------------------------------------------
-- procedure add_new_session
-- -----------------------------------------------------

USE `cchs`;
DROP procedure IF EXISTS `cchs`.`add_new_session`;

DELIMITER $$
USE `cchs`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `add_new_session`()
BEGIN
DECLARE prev_name VARCHAR(45);
DECLARE new_name VARCHAR(45);
DECLARE prev_id INT;
DECLARE new_id INT;
DECLARE next_term INT;

DECLARE error_message VARCHAR(1024);
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
GET DIAGNOSTICS CONDITION 1
error_message = MESSAGE_TEXT;
ROLLBACK;
-- SELECT CONCAT('Error: ', error_message) AS 'Error Message';
-- SET full_error_message = CONCAT('Error in calling procedure: ', error_message);
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = error_message;
END;
START TRANSACTION;



-- Step 1: Update the current term
UPDATE term SET is_current = 0 WHERE is_current = 1;

-- Step 2: Update the next term
SET next_term = (SELECT term FROM term WHERE is_current = 0 ORDER BY last_update ASC LIMIT 1);
UPDATE term SET is_current = 1 WHERE term =next_term;

-- Step 3: Insert a new record into school_session
SELECT s_name, school_session.id INTO prev_name, prev_id 
FROM school_session ORDER BY id DESC LIMIT 1;

SET new_name = CONCAT(SUBSTRING(prev_name, 1, 4) + 1, '/', SUBSTRING(prev_name, 6, 4) + 1);

INSERT INTO school_session (s_name, start_date, end_date, is_current)
VALUES (new_name, NOW(), NULL, 1);

SELECT id into new_id FROM school_session ORDER BY id DESC LIMIT 1;

-- Update the previous records
IF prev_id IS NOT NULL THEN
UPDATE school_session SET is_current = 0 WHERE id < new_id;
UPDATE school_session SET end_date = NOW() WHERE id = prev_id;
END IF;
COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure promote_students
-- -----------------------------------------------------

USE `cchs`;
DROP procedure IF EXISTS `cchs`.`promote_students`;

DELIMITER $$
USE `cchs`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `promote_students`()
BEGIN
DECLARE done BOOLEAN DEFAULT FALSE;
DECLARE current_grade INT;
DECLARE student_id INT;
DECLARE session_id INT;
DECLARE error_message VARCHAR(255);
DECLARE student_cursor CURSOR FOR
SELECT DISTINCT student_id FROM studentclasshistory WHERE graduated <> 1;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = true;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
GET DIAGNOSTICS CONDITION 1
error_message = MESSAGE_TEXT;
ROLLBACK;
-- SELECT CONCAT('Error: ', error_message) AS 'Error Message';
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = error_message;
END;
START TRANSACTION;



-- Initialize a cursor that loops through every student in the table
OPEN student_cursor;
student_loop: LOOP
FETCH student_cursor INTO student_id;
IF done THEN
LEAVE student_loop;
END IF;

-- These statements run for each iteration in the loop i.e for each student
-- Save the current (ensured by the order by clause acting on last_update) grade/class of the student into a variable
SET current_grade = (SELECT class_id FROM studentclasshistory WHERE student_id
= student_id ORDER BY last_update DESC LIMIT 1);

SET session_id = (SELECT id FROM school_session ORDER BY id DESC LIMIT 1);

-- For all non-terminal class students, insert a new record into the table
IF current_grade IS NULL THEN
INSERT INTO studentclasshistory (
student_id, class_id, graduated, teacher_id, classroom_id, session_id, start_date, end_date, last_update
)
VALUES (student_id, current_grade, NULL, NULL, NULL, session_id, NOW(), NULL, NOW());
END IF;

IF current_grade < 12 THEN
INSERT INTO studentclasshistory (
student_id, class_id, graduated, teacher_id, classroom_id, session_id, start_date, end_date, last_update
)
VALUES (student_id, current_grade + 1, NULL, NULL, NULL, session_id + 1, NOW(), NULL, NOW());

-- set their previous record's end_date to now
UPDATE studentclasshistory 
SET 
    end_date = NOW()
WHERE
    student_id = student_id
        AND class_id = current_grade;
ELSE
-- For terminal class students, set their graduated column to TRUE
UPDATE studentclasshistory 
SET graduated = 1
 WHERE student_id = student_id
AND class_id = 12;
END IF;
END LOOP;

 CLOSE student_cursor;
 
 -- We would still have to later set the teacher_id and classroom_id of the newly promoted classes
COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure register_hod
-- -----------------------------------------------------

USE `cchs`;
DROP procedure IF EXISTS `cchs`.`register_hod`;

DELIMITER $$
USE `cchs`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `register_hod`(
IN id INT,
IN first_name VARCHAR(45),
IN last_name VARCHAR(45),
IN dob DATE, 
IN blood_group VARCHAR(4),
IN genotype CHAR(2),
IN religion ENUM('Christianity', 'Islam', 'Others'),
IN address TEXT,
IN phone CHAR(11),
IN spouse_phone CHAR(11),
IN ethnicity VARCHAR(50),
IN city_or_town VARCHAR(45),
IN medical_condition VARCHAR(45),
IN bonus DECIMAL,
IN dept_id INT
)
BEGIN
DECLARE error_message VARCHAR(1024);
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
GET DIAGNOSTICS CONDITION 1
error_message = MESSAGE_TEXT;
ROLLBACK;
-- SELECT CONCAT('Error: ', error_message) AS 'Error Message';
-- SET full_error_message = CONCAT('Error in calling procedure: ', error_message);
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = error_message;
END;
START TRANSACTION;
-- The necessity of this procedure was born of the fact that there needed to be a way
-- to insert the hod_ids of new employees into their tables without causing a dependency issue
-- SO with this procedure, as part of initializing the database, new users would first register
-- managers using this procedure before inserting any other staff

IF id = 0

THEN
INSERT INTO person ( first_name, last_name, dob, blood_group, genotype, religion, address, phone, spouse_phone, ethnicity, city_or_town, medical_condition)
VALUES (first_name, last_name, dob, blood_group, genotype, religion, address, phone, spouse_phone, ethnicity, city_or_town, medical_condition);

INSERT INTO staff (person_id, spouse_phone, bonus, dept_id, hod_id)
VALUES (LAST_INSERT_ID(), spouse_phone, bonus, dept_id, LAST_INSERT_ID());

ELSE 
UPDATE staff
SET hod_id = id
WHERE person_id = id;


END IF;

COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure register_staff
-- -----------------------------------------------------

USE `cchs`;
DROP procedure IF EXISTS `cchs`.`register_staff`;

DELIMITER $$
USE `cchs`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `register_staff`(
IN id INT,
IN first_name VARCHAR(45),
IN last_name VARCHAR(45),
IN dob DATE, 
IN blood_group VARCHAR(4),
IN genotype CHAR(2),
IN religion ENUM('Christianity', 'Islam', 'Others'),
IN address TEXT,
IN phone CHAR(11),
IN spouse_phone CHAR(11),
IN ethnicity VARCHAR(50),
IN city_or_town VARCHAR(45),
IN medical_condition VARCHAR(45),
IN bonus DECIMAL,
IN dept_id INT
)
BEGIN
DECLARE var INT;
DECLARE error_message VARCHAR(1024);
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
GET DIAGNOSTICS CONDITION 1
error_message = MESSAGE_TEXT;
ROLLBACK;
-- SELECT CONCAT('Error: ', error_message) AS 'Error Message';
-- SET full_error_message = CONCAT('Error in calling procedure: ', error_message);
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = error_message;
END;
START TRANSACTION;

SET var = (SELECT hod_id from staff WHERE staff.hod_id = person_id AND staff.dept_id = dept_id ORDER BY last_update DESC LIMIT 1);
IF id = 0

THEN
INSERT INTO person ( first_name, last_name, dob, blood_group, genotype, religion, address, phone, spouse_phone, ethnicity, city_or_town, medical_condition)
VALUES (first_name, last_name, dob, blood_group, genotype, religion, address, phone, spouse_phone, ethnicity, city_or_town, medical_condition);


INSERT INTO staff (person_id, spouse_phone, bonus, dept_id, hod_id)
VALUES (LAST_INSERT_ID(), spouse_phone, bonus, dept_id, var);

ELSE 
INSERT INTO staff (person_id, spouse_phone, bonus, dept_id, hod_id)
VALUES (id, spouse_phone, bonus, dept_id, var);

END IF;

COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure register_student
-- -----------------------------------------------------

USE `cchs`;
DROP procedure IF EXISTS `cchs`.`register_student`;

DELIMITER $$
USE `cchs`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `register_student`(
IN first_name VARCHAR(45),
IN last_name VARCHAR(45),
IN dob DATE, 
IN blood_group VARCHAR(4),
IN genotype CHAR(2),
IN religion ENUM('Christianity', 'Islam', 'Others'),
IN address TEXT,
IN phone CHAR(11),
IN ethnicity VARCHAR(50),
IN city_or_town VARCHAR(45),
IN medical_condition VARCHAR(45),
IN class_id INT
)
BEGIN
DECLARE error_message VARCHAR(1024);
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
GET DIAGNOSTICS CONDITION 1
error_message = MESSAGE_TEXT;
ROLLBACK;
-- SELECT CONCAT('Error: ', error_message) AS 'Error Message';
-- SET full_error_message = CONCAT('Error in calling procedure: ', error_message);
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = error_message;
END;
START TRANSACTION;

INSERT INTO person (first_name, last_name, dob, blood_group, genotype, religion, address, phone, spouse_phone, ethnicity, city_or_town, medical_condition)
VALUES (first_name, last_name, dob, blood_group, genotype, religion, address, phone, null, ethnicity, city_or_town, medical_condition);

INSERT INTO student (person_id, class_id)
VALUES (LAST_INSERT_ID(), class_id);

COMMIT;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure register_teacher
-- -----------------------------------------------------

USE `cchs`;
DROP procedure IF EXISTS `cchs`.`register_teacher`;

DELIMITER $$
USE `cchs`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `register_teacher`(
IN id INT,
IN first_name VARCHAR(45),
IN last_name VARCHAR(45),
IN dob DATE, 
IN blood_group VARCHAR(4),
IN genotype CHAR(2),
IN religion ENUM('Christianity', 'Islam', 'Others'),
IN address TEXT,
IN phone CHAR(11),
IN spouse_phone CHAR(11),
IN ethnicity VARCHAR(50),
IN city_or_town VARCHAR(45),
IN medical_condition VARCHAR(45),
IN bonus DECIMAL,
IN dept_id INT
)
BEGIN
DECLARE error_message VARCHAR(1024);
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
GET DIAGNOSTICS CONDITION 1
error_message = MESSAGE_TEXT;
ROLLBACK;
-- SELECT CONCAT('Error: ', error_message) AS 'Error Message';
-- SET full_error_message = CONCAT('Error in calling procedure: ', error_message);
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = error_message;
END;
START TRANSACTION;

IF id IN (SELECT person_id FROM staff)
THEN
INSERT INTO teachingstaff (person_id) -- create new record in teachingstaff table
VALUES (id);
ELSE
CALL register_staff(id, first_name, last_name, dob, 
blood_group, genotype, religion, address, phone, spouse_phone, ethnicity, city_or_town, medical_condition, bonus, dept_id);


INSERT INTO teachingstaff (person_id) -- create new record in teachingstaff table
VALUES (LAST_INSERT_ID());
END IF;
COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure set_current_term
-- -----------------------------------------------------

USE `cchs`;
DROP procedure IF EXISTS `cchs`.`set_current_term`;

DELIMITER $$
USE `cchs`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `set_current_term`()
BEGIN
DECLARE next_term INT;
DECLARE error_message VARCHAR(1024);
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
GET DIAGNOSTICS CONDITION 1
error_message = MESSAGE_TEXT;
ROLLBACK;
-- SELECT CONCAT('Error: ', error_message) AS 'Error Message';
-- SET full_error_message = CONCAT('Error in calling procedure: ', error_message);
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = error_message;
END;
START TRANSACTION;


-- Step 1: Update the current term
UPDATE term SET is_current = 0 WHERE is_current = 1;

-- Step 2: Update the next term
SET next_term = (SELECT term FROM term WHERE is_current = 0 ORDER BY last_update ASC LIMIT 1);
UPDATE term SET is_current = 1 WHERE term =next_term;
COMMIT;
END$$

DELIMITER ;
USE `cchs`;

DELIMITER $$

USE `cchs`$$
DROP TRIGGER IF EXISTS `cchs`.`student_AFTER_INSERT` $$
USE `cchs`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `cchs`.`student_AFTER_INSERT`
AFTER INSERT ON `cchs`.`student`
FOR EACH ROW
BEGIN

DECLARE s_id INT;
SET s_id = (SELECT session_id FROM termship ORDER BY start_date DESC LIMIT 1);

INSERT INTO studentclasshistory (
student_id, class_id, graduated, teacher_id, classroom_id, session_id, start_date, end_date, last_update
)
VALUES (NEW.person_id, NEW.class_id, 0, NULL, 1, s_id, NOW(), NULL, NOW());

END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
